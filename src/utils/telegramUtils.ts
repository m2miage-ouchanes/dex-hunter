import { NewMessage, NewMessageEvent } from 'telegram/events';
import { TelegramClient } from 'telegram';
import { getTransactionDetails, currentPriceToken } from './solanaUtils';
import { checkAddressInSheet, addTokenToSheet } from './ggSheetsUtils';
import { buyToken } from '../api/solProfitWave';

/**
 * G√®re les messages entrants et traite ceux qui correspondent √† un swap de SOL.
 */
export async function processMessage(event: NewMessageEvent) {
    const message = event.message;

    const tokenAddress = extractTokenAddressFromMessage(message);
    const tokenName = extractTokenNameFromMessage(message);
                    
    // V√©rifiez si la cl√© du token est r√©cup√©r√©e
    if (tokenAddress) {
        const exists = await checkAddressInSheet(tokenAddress);
        if (!exists) {
            console.log('Adresse non trouv√©e dans la feuille. Achat du token en cours...');
            try {
                // Appel √† l'API pour acheter le token
                await buyToken(tokenAddress, 0.01); // Acheter pour 0.01 SOL

                console.log('Achat r√©ussi. Ajout de l\'adresse dans la feuille.');

                const tokenPrice = await currentPriceToken(tokenAddress);

                // Ajouter l'adresse et le prix du token lors de l'achat du token dans la feuille Google Sheets
                await addTokenToSheet(tokenAddress, tokenName, tokenPrice);

            } catch (error) {
                console.error('Erreur lors de l\'achat du token :', error);
            }
        }
    }
    console.log('Fin du traitement !');
}

/**
 * D√©marre l'√©coute des messages dans un chat sp√©cifique.
 * @param client Instance du client Telegram
 * @param chatId ID du chat √† filtrer
 */
export function startTelegramListener(client: TelegramClient, chatId: number) {
    client.addEventHandler(
        async (event) => {
            try {
                // Appel √† la fonction de traitement du message
                await processMessage(event);
            } catch (error) {
                console.error('Erreur lors du traitement du message :', error);
            }
        },
        // Appliquer le filtre de chat ici
        new NewMessage({ chats: [chatId] })
    );
}

/**
 * Extrait l'adresse du token √† partir d'un message contenant "CA:".
 * @param message Le message Telegram contenant potentiellement l'adresse du token
 * @returns L'adresse du token si elle est trouv√©e, sinon null
 */
export function extractTokenAddressFromMessage(message: any): string | null {
    if (message && message.text) {
        const lines: string[] = message.text.split('\n');

        // V√©rification d'un swap de SOL dans le message
        const swappedLine = lines.find((line: string) => line.startsWith('üí∏ Swapped:') && line.includes('SOL'));
        if (swappedLine) {
            console.log('C\'est un ordre d\'achat !');
        
            // Rechercher la ligne qui commence par "JeetPT CA:" ou similaire
            const caLine = lines.find((line: string) => line.includes('CA:'));
        
            if (caLine) {
                // Extraire l'adresse du token apr√®s "CA:"
                const caMatch = caLine.match(/CA:\s*`?([a-zA-Z0-9]+)`?/); // Modifi√© pour capturer l'adresse sans les backticks
                const tokenAddress = caMatch ? caMatch[1] : null;
                
                if (tokenAddress) {
                    console.log(`Adresse du token trouv√©e : ${tokenAddress}`);
                    return tokenAddress;
                }
            }
        } else {
            console.log("Ce n'est pas un ordre d'achat.");
            return null; // Retourne null si ce n'est pas un ordre d'achat
        }
    }
    
    console.log('Aucune adresse de token trouv√©e dans le message.');
    return null; // Retourne null si aucune adresse n'a √©t√© trouv√©e
}


export function extractTokenNameFromMessage(message: any): string {
    if (message && message.text) {
        const lines: string[] = message.text.split('\n');

        // Rechercher la ligne qui contient "CA:"
        const caLine = lines.find((line: string) => line.includes('CA:'));

        if (caLine) {
            // Extraire le nom du token avant "CA:"
            const tokenNameMatch = message.text.match(/(.*?)\s+CA:/);
            if (tokenNameMatch && tokenNameMatch[1]) {
                return tokenNameMatch[1].trim(); // Retirer les espaces autour
            }
        }
    }
    
    return ''; // Retourne une cha√Æne vide si aucun nom n'est trouv√©
}


/**
 * !!!!! Plus valide !!!!!
 * Extrait le prix d'achat du token √† partir d'un message contenant des informations de transaction.
 * @param message Le message Telegram contenant potentiellement le prix d'achat
 * @returns Le prix d'achat du token sous forme de cha√Æne, ou une cha√Æne vide si non trouv√©
 */
export function extractPurchasePriceFromMessage(message: any): string {
    if (message && message.text) {
        const lines: string[] = message.text.split('\n');

        // Rechercher la ligne qui commence par "üí∞ Received:"
        const receivedLine = lines.find((line: string) => line.startsWith('üí∞ Received:'));
        
        if (receivedLine) {
            // Utiliser une expression r√©guli√®re pour extraire le prix qui suit "Price:"
            const priceMatch = receivedLine.match(/Price:\s*\$?([\d.,]+)/);
            if (priceMatch && priceMatch[1]) {
                const price = priceMatch[1].trim(); // Retirer les espaces autour
                return price.replace('.', ','); // Remplacer "." par ","
            }
        }
    }
    
    return ''; // Retourne une cha√Æne vide si aucun prix n'est trouv√©
}



/**
 * Extrait la cl√© du token √† partir d'un message contenant une transaction.
 * @param message Le message Telegram contenant potentiellement une transaction
 * @param transactionUrlPattern Le pattern de l'URL de transaction sp√©cifique au r√©seau (ex: Solana, Ethereum)
 * @returns La cl√© du token si elle est trouv√©e, sinon null
 */
export async function extractTokenKeyFromTxMessage(message: any, transactionUrlPattern: RegExp): Promise<string | null> {
    if (message && message.text && message.entities) {
        // Parcourir toutes les entit√©s et v√©rifier si elles sont des URLs
        const txEntity = message.entities.find((entity: any) => {
            const textInMessage = message.text.slice(entity.offset, entity.offset + entity.length);
            return entity.className === 'MessageEntityTextUrl';
        });

        // V√©rifier la pr√©sence de l'URL dans l'entit√© trouv√©e
        if (txEntity && 'url' in txEntity) {
            const txKeyMatch = txEntity.url.match(transactionUrlPattern);
            const txKey = txKeyMatch ? txKeyMatch[1] : null;

            if (txKey) {
                console.log(`Cl√© de la transaction trouv√©e : ${txKey}`);
                // Appel √† la fonction qui r√©cup√®re les d√©tails de la transaction
                const tokenKey = await getTransactionDetails(txKey);
                return tokenKey || null; // Retourne la cl√© du token ou null si elle est undefined
            } else {
                console.log('Aucune cl√© de transaction trouv√©e dans l\'URL.');
            }
        } else {
            console.log('Aucune entit√© "TX" avec une URL trouv√©e.');
        }
    }
    return null; // Retourne null si aucune cl√© de token n'a √©t√© trouv√©e
}
